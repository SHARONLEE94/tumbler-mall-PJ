<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tumblermall.board.mapper.BoardMapper">
    <resultMap id="boardList" type="com.tumblermall.board.dto.BoardMainDto">
        <result property="postId" column="post_id"></result>
        <result property="boardType" column="board_type_code"></result>
        <result property="postTitle" column="post_title"></result>
        <result property="postWriter" column="writer_id"></result>
        <result property="writeAt" column="post_write_history"></result>
        <result property="viewCount" column="view_count"></result>
        <result property="isPinned" column="is_pinned"></result>
    </resultMap>

    <select id="boardMain" parameterType="String" resultMap="boardList">
        select p.board_type_code, p.post_title, p.writer_id, p.view_count, ph.post_write_history, p.post_id, p.is_pinned
        from modeling.post p
                 join modeling.post_history ph
                      on p.post_id = ph.post_id
        where ph.post_history_type_id = 1
        order by ph.post_write_history desc, p.is_pinned desc
    </select>

    <update id="viewUp" parameterType="Integer">
        update modeling.post
        set view_count = view_count + 1
        where post_id = #{postId}
    </update>

    <resultMap id="context" type="com.tumblermall.board.dto.BoardContextDto">
        <result property="postId" column="post_id"></result>
        <result property="postTitle" column="post_title"></result>
        <result property="postWriter" column="writer_id"></result>
        <result property="postAt" column="post_write_history"></result>
        <result property="postContext" column="post_context"></result>
        <result property="viewCount" column="view_count"></result>
    </resultMap>

    <select id="showContext" parameterType="Integer" resultMap="context">
        select  p.post_id, p.post_title, p.writer_id, p.view_count, ph.post_write_history, pc.post_context
        from modeling.post p
                 join modeling.post_context_save pc
                      on p.post_id = pc.post_id
                 join modeling.post_history ph
                      on ph.post_id = pc.post_id
        where pc.post_id = #{postId};
    </select>

<!--    &lt;!&ndash;  작성 - 공지사항   &ndash;&gt;-->
<!--    <insert id="noticemain" parameterType="AdminWriteVo" useGeneratedKeys="true" keyProperty="postId">-->
<!--        insert into modeling.post-->
<!--            (post_title, board_type_code, writer_id)-->
<!--            values (#{title},#{boardCode},999);-->
<!--    </insert>-->
<!--    <insert id="noticecontext" parameterType="AdminWriteVO">-->
<!--        insert into modeling.post_context_save-->
<!--        (post_id, post_context)-->
<!--        values (#{postId},#{context});-->
<!--    </insert>-->
<!--    <insert id="noticehistory" parameterType="Map">-->
<!--        insert into modeling.post_history-->
<!--        (post_id, post_history_type_id, post_write_history, post_present_status)-->
<!--        values (#{postId},NOW(), 1,"ACTIVE");-->
<!--    </insert>-->

    <!--    이벤트   -->


<!--    연습용    -->
    <select id="practice" resultType="String" parameterType="String">
        select board_type_code, post_title, writer_id
        from modeling.post
        where post_id = #{toser}
    </select>
</mapper>